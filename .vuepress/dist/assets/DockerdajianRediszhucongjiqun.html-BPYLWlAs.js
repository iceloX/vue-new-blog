import{_ as a,o as s,c as e,a as n}from"./app-K_NCcnF4.js";const i={},r=n(`<h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>为主节点master 配置一个节点 slave，不管slave 是否为第一次连接上 master，slave 都会发送一个sync 命令给master 请求复制数据。</p><p>master接受到sync 命令后，会在后头进行数据持久化，通过<code>bgsave</code> 生成最新的rdb 快照文件，在生成 rdb快照期间 master 如果收到客户端的更新请求，master 会把这些修改的请求缓存在内存中。</p><p>当持久化进行完毕之后，master 会把这份rdb文件数据集发送到slave，slave会把接收到的数据进行持久化成rdb，然后加载到内存中，然后master，在将之前缓存在内存中的命令发送到slave；</p><p>当master 与 slave 之间的连接由于某些原因而断开，slave 能自动重连master，如果master收到多个slave 并发连接请求，master 只会进行一次持久化，而不是一个链接一次持久化，然后再把这一份持久化数据发送给多个并发连接的 slave</p><p>当 master 和 slave 断开重连后，一般会对整份的数据进行复制，但是从redis 2.8 之后master 和slave 端口后重连支持部分复制。</p><p><strong>部分复制的过程：</strong></p><p>master会在其内存中创建一个复制数据用的缓冲队列 <img src="https://ae02.alicdn.com/kf/H4af8ca2f960449bc98b3c223ace8048f4.png" alt="image.png"><img src="https://ae03.alicdn.com/kf/H2ef028f3b591457da8019b64c79f546e1.png" alt="image.png"></p><h2 id="主从复制的特点" tabindex="-1"><a class="header-anchor" href="#主从复制的特点" aria-hidden="true">#</a> 主从复制的特点</h2><ol><li>同一个Master 可以拥有多个Slave</li><li>Master 下的Slave 还可以接受同一架构中其他Slave 的连接与同步请求，实现数据的级联复制，即Master -&gt; Slave -&gt; Slave模式</li><li>Master 以非阻塞的方式同步数据至Slave，这将意味着Master 会继续处理一个或者多个Slave 的读写请求</li><li>主从复制不会阻塞Master，当一个或多个Slave 与 Master进行初次同步数据的时候，Master 可以继续处理客户端发来的请求</li><li>主从复制具有可拓展性，即多个Slave 专门提供只读查询与数据的冗余，Master 专门提供写操作</li><li>通过配置禁用Master 数据持久化机制，将其数据持久化操作交给Slave完成，避免在Master中有独立的进程来完成此操作</li></ol><h2 id="主从复制的优势" tabindex="-1"><a class="header-anchor" href="#主从复制的优势" aria-hidden="true">#</a> 主从复制的优势</h2><ul><li>避免Redis 单点故障</li><li>做到读写分离，构建读写分离架构，满足读多写少的应用场景</li></ul><h2 id="docker-搭建-redis-主从集群" tabindex="-1"><a class="header-anchor" href="#docker-搭建-redis-主从集群" aria-hidden="true">#</a> Docker 搭建 Redis 主从集群</h2><h3 id="_1、拉取-redis-镜像" tabindex="-1"><a class="header-anchor" href="#_1、拉取-redis-镜像" aria-hidden="true">#</a> 1、拉取 Redis 镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、创建文件和文件夹" tabindex="-1"><a class="header-anchor" href="#_2、创建文件和文件夹" aria-hidden="true">#</a> 2、创建文件和文件夹</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/src 
<span class="token function">mkdir</span> redis-cluster  
<span class="token builtin class-name">cd</span> ./redis-cluster 
<span class="token function">touch</span> redis-cluster.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向 <code>redis-cluster.conf</code> 写入 配置如下：</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>port \${PORT}
cluster-enabled yes
protected-mode no
cluster-config-file nodes.conf
cluster-node-timeout 5000
#对外ip
cluster-announce-ip [ip] # 修改为你的ip地址
cluster-announce-port \${PORT}
cluster-announce-bus-port 1\${PORT}
appendonly yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、创建-docker-网络" tabindex="-1"><a class="header-anchor" href="#_3、创建-docker-网络" aria-hidden="true">#</a> 3、创建 docker 网络</h3><p>创建一个 docker 网络，为了 Redis 中的集群通信</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create redis-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4、使用-shell-生成配置信息" tabindex="-1"><a class="header-anchor" href="#_4、使用-shell-生成配置信息" aria-hidden="true">#</a> 4、使用 shell 生成配置信息</h3><p>进入到<code>redis-cluster</code>文件夹中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/src/redis-cluster
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成conf和data目录，并生成配置信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">seq</span> <span class="token number">6000</span> <span class="token number">6005</span><span class="token variable">\`</span></span><span class="token punctuation">;</span> 
<span class="token keyword">do</span> 
  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./<span class="token variable">\${port}</span>/conf 
  <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token variable">\${port}</span> envsubst <span class="token operator">&lt;</span> ./redis-cluster.conf <span class="token operator">&gt;</span> ./<span class="token variable">\${port}</span>/conf/redis.conf 
  <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ./<span class="token variable">\${port}</span>/data<span class="token punctuation">;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成6个文件夹，从 6000 到 6005 ，每个文件夹下包含data和conf文件夹，同时conf里面有redis.</p><h3 id="_5、创建-redis-镜像" tabindex="-1"><a class="header-anchor" href="#_5、创建-redis-镜像" aria-hidden="true">#</a> 5、创建 Redis 镜像</h3><p>创建 shell 脚本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> start.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写 shell 脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">port</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">seq</span> <span class="token number">6000</span> <span class="token number">6005</span><span class="token variable">\`</span></span><span class="token punctuation">;</span> 
<span class="token keyword">do</span> 
  <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-ti</span> <span class="token parameter variable">-p</span> <span class="token variable">\${port}</span><span class="token builtin class-name">:</span><span class="token variable">\${port}</span> <span class="token parameter variable">-p</span> <span class="token number">1</span><span class="token variable">\${port}</span>:1<span class="token variable">\${port}</span> <span class="token parameter variable">-v</span> /usr/local/src/redis-cluster/<span class="token variable">\${port}</span>/conf/redis.conf:/usr/local/etc/redis/redis.conf <span class="token parameter variable">-v</span> /usr/local/src/redis-cluster/<span class="token variable">\${port}</span>/data:/data  <span class="token parameter variable">--restart</span> always <span class="token parameter variable">--name</span> redis-<span class="token variable">\${port}</span> <span class="token parameter variable">--net</span> redis-net <span class="token parameter variable">--sysctl</span> <span class="token assign-left variable">net.core.somaxconn</span><span class="token operator">=</span><span class="token number">1024</span> redis redis-server /usr/local/etc/redis/redis.conf<span class="token punctuation">;</span> 
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> start.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>如果容器的状态为up则，启动成功！否则使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">--since</span> 30m <span class="token punctuation">[</span>CONTAINER ID<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来查看日志</p></div><h3 id="_6、构建集群" tabindex="-1"><a class="header-anchor" href="#_6、构建集群" aria-hidden="true">#</a> 6、构建集群</h3><p>进入到任意一个容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> CONTAINER ID  /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/local/bin <span class="token operator">&amp;&amp;</span> redis-cli <span class="token parameter variable">--cluster</span> create ip:6000 ip:6001 ip:6002 ip:6003 ip:6004 ip:6005 --cluster-replicas <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>请确保开放了 <code>6000-6005</code>和<code>16000-16005</code> 端口 如果出现 <code>waiting for the Cluster to join</code>，那么应该是你端口没有开放完全。</p></div><p>中途要输入 yes，确认要初始化。</p><h3 id="查看信息" tabindex="-1"><a class="header-anchor" href="#查看信息" aria-hidden="true">#</a> 查看信息</h3><p>使用redis-cli进入任一端口</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-h</span> <span class="token function">ip</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-p</span> <span class="token number">6000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看节点消息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看集群信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>记录一下使用服务器搭建Redis集群，后面可能（大概、也许）会搭建一个哨兵模式，下次见！</p>`,54),l=[r];function c(d,t){return s(),e("div",null,l)}const o=a(i,[["render",c],["__file","DockerdajianRediszhucongjiqun.html.vue"]]);export{o as default};
